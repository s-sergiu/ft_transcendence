#!/bin/bash

PRESS_ENTER="\e[1;38m"
BG_RED="\e[41m"
RED="\e[31m"
BLUE="\e[34m"
GREEN="\e[32m"
ENDCOLOR="\e[0m"
CYAN="\e[36m"
MAGENTA="\e[95m"

main() {

	user_gid=$(id -g)
	gid_to_replace=$(grep USER_GID= .env | cut -d '=' -f2)

	cp .env .env.old
	cat .env.old | sed "s/$(grep STAGE= .env)/STAGE=$1/" > .env

	if [[ $1 == 'dev' ]]
		then
			cp .env .env.old
			cat .env.old | sed "s/$(grep GENERATE_SOURCEMAP= .env)/GENERATE_SOURCEMAP=false/" > .env
			cp .env .env.old
			cat .env.old | sed "s/$(grep HTTP_METHOD= .env)/HTTP_METHOD=http/" > .env
			cp .env .env.old
			cat .env.old | sed "s/$(grep REACT_PORT= .env)/REACT_PORT=80/" > .env
		else
			cp .env .env.old
			cat .env.old | sed "s/$(grep GENERATE_SOURCEMAP= .env)/GENERATE_SOURCEMAP=true/" > .env
			cp .env .env.old
			cat .env.old | sed "s/$(grep HTTP_METHOD= .env)/HTTP_METHOD=https/" > .env
			cp .env .env.old
			cat .env.old | sed "s/$(grep REACT_PORT= .env)/REACT_PORT=443/" > .env
	fi


	if [[ $1 == 'dev' ]]
		then
			cp .env .env.old
			cat .env.old | sed "s/$(grep DJANGO_DEBUG= .env)/DJANGO_DEBUG=True/" > .env
		else
			cp .env .env.old
			cat .env.old | sed "s/$(grep DJANGO_DEBUG= .env)/DJANGO_DEBUG=False/" > .env
	fi

	if [[ $OSTYPE == darwin* ]]
		then 
			ip=$(ifconfig | grep en1 -A 1 | grep "inet " | awk '{ print $2 }')
			host_name=$(hostname | tr '[:upper:]' '[:lower:]')
		else 
			ip=$(ip add | grep "BROADCAST,MULTICAST,UP,LOWER_UP" -A 2 | grep inet -m1 | awk '{print $2}' | cut -d '/' -f1)
			host_name=$(hostnamectl hostname | tr '[:upper:]' '[:lower:]')
	fi
	ip_to_replace=$(grep HOST_IP= .env | cut -d '=' -f2)
	hostname_to_replace=$(grep HOST_NAME= .env | awk '{ print $1 }' | cut -d '=' -f2)

	cp .env .env.old
	cat .env.old | sed "s/$gid_to_replace/$user_gid/"  > .env
	cp .env .env.old
	cat .env.old | sed "s/$ip_to_replace/$ip/"  > .env
	cp .env .env.old
	cat .env.old | sed "s/$hostname_to_replace/$host_name/"  > .env
	rm .env.old

	docker compose up --build
}

cleanup() {
	docker kill $(docker ps)
	docker rm $(docker ps -a)
	docker rmi $(docker images)
	docker system prune -af --volumes
	rm -rf debug/
}

press_enter() {
  echo ""
  echo -en $PRESS_ENTER"	Press Enter to continue "$ENDCOLOR
  read
  clear
}

exit_case() {
	exit
}

incorrect_selection() {
  echo -e $BG_RED"Wrong choice! Try again."$ENDCOLOR
}

until [ "$selection" = "q" ]; do
  clear
  echo ""
  echo -e $GREEN"    	p  -  Start server in production mode"$ENDCOLOR
  echo -e $CYAN"    	d  -  Start server in development mode"$ENDCOLOR
  echo -e $BLUE"    	c  -  Clean up docker files"$ENDCOLOR
  echo -e $RED"    	q  -  Exit" $ENDCOLOR
  echo ""
  echo -en $MAGENTA"  Enter selection: "$ENDCOLOR
  read selection
  echo ""
  case $selection in
    p ) clear ; main "prod" ; press_enter ;;
    d ) clear ; main "dev" ; press_enter ;;
    c ) clear ; cleanup ; press_enter ;;
    q ) clear ; exit ;;
    * ) clear ; incorrect_selection ; press_enter ;;
  esac
done
